; generated by build tools

MEM_START=$FFFF0000
;
;*******************************************************************************
; memory map for things specific to this demo
;*******************************************************************************
;-------------------------------------------------------------------------------
; debug registers
;-------------------------------------------------------------------------------
MEM_DEBUG_1=$FFFF0000	; general debug register
MEM_DEBUG_2=$FFFF0002	; general debug register
;
;-------------------------------------------------------------------------------
; debug registers
;-------------------------------------------------------------------------------
MEM_RANDOM_1=$FFFF0004	; pseudorandom number for guaranteed path generation
MEM_RANDOM_2=$FFFF0006	; pseudorandom number for random path generation
MEM_RANDOM_3=$FFFF0008	; pseudorandom number for mapping paths to elevators
;
;-------------------------------------------------------------------------------
; used to build floor paths
;-------------------------------------------------------------------------------
MEM_FLOOR_QUEUE=$FFFF000A	; queue of floors
MEM_RANDOM_ORDER=$FFFF002A	; order of floors in the random path
MEM_GUARANTEED_ORDER=$FFFF004A	; order of floors in the guaranteed path
;
;-------------------------------------------------------------------------------
; tracking enter/exit stuff
;-------------------------------------------------------------------------------
MEM_EXITING_DOOR_NUM=$FFFF006A	; track which door (0-3) the player is exiting
MEM_EXITING_DOOR_PATH=$FFFF006C	; track which path (0-3) the exiting door is on
MEM_ENTERING_DOOR_NUM=$FFFF006E	; track which door (0-3) the player is entering
MEM_ENTERING_DOOR_PATH=$FFFF0070	; track which path (0-3) the entering door is on
MEM_ENTERING_SCENE_ID=$FFFF0072	; track which scene the player is entering
;
;-------------------------------------------------------------------------------
; tracking things the player has done
;-------------------------------------------------------------------------------
MEM_ROOMS_VISITED=$FFFF0074	; track which rooms have been visited
MEM_DIALOG_EVENTS=$FFFF0078	; track regular NPC dialog
MEM_STORY_EVENTS=$FFFF007C	; track events viewed & item clues received
;
;-------------------------------------------------------------------------------
; everything else
;-------------------------------------------------------------------------------
MEM_PC_ID=$FFFF0080	; which sprite the player chose
MEM_LOOP_COUNTER=$FFFF0082	; for one spot where I ran out of registers
MEM_BIT_COUNTER=$FFFF0084	; for one spot where I ran out of registers
;*******************************************************************************
; memory map for the base retail clerk game engine
;*******************************************************************************
;
;-------------------------------------------------------------------------------
; table to sort the draw order of sprites
;-------------------------------------------------------------------------------
MEM_SPRITE_SORT_TABLE_SORTED=$FFFF0086	; 0000=sorted
MEM_SPRITE_SORT_TABLE_ID0=$FFFF0088	; sort table ID 0
MEM_SPRITE_SORT_TABLE_VALUE0=$FFFF008A	; sort table value 0
MEM_SPRITE_SORT_TABLE_ID1=$FFFF008C	; sort table ID 1
MEM_SPRITE_SORT_TABLE_VALUE1=$FFFF008E	; sort table value 1
MEM_SPRITE_SORT_TABLE_ID2=$FFFF0090	; sort table ID 2
MEM_SPRITE_SORT_TABLE_VALUE2=$FFFF0092	; sort table value 2
MEM_SPRITE_SORT_TABLE_ID3=$FFFF0094	; sort table ID 3
MEM_SPRITE_SORT_TABLE_VALUE3=$FFFF0096	; sort table value 3
MEM_SPRITE_SORT_TABLE_ID4=$FFFF0098	; sort table ID 4
MEM_SPRITE_SORT_TABLE_VALUE4=$FFFF009A	; sort table value 4
;
;-------------------------------------------------------------------------------
; counters
;-------------------------------------------------------------------------------
MEM_VBLANK_COUNTER=$FFFF009C	; incremented at vblank - used for debug & RNG
MEM_MAINLOOP_COUNTER=$FFFF009E	; used for debug & RNG
MEM_FRAME_COUNTER=$FFFF00A0	; current frame
;
;-------------------------------------------------------------------------------
; program flow
;-------------------------------------------------------------------------------
MEM_NPC_LOOP_COUNTER=$FFFF00A2	; used for loop control in main
;
;-------------------------------------------------------------------------------
; controller input
;-------------------------------------------------------------------------------
MEM_CONTROL_1_ID=$FFFF00A4	; what type of controller is connected
MEM_CONTROL_1_6BUTTON=$FFFF00A6	; whether first controller is 6 button
MEM_CONTROL_HELD=$FFFF00A8	; store value of regular held buttons
MEM_CONTROL_PRESSED=$FFFF00AA	; store value of regular pressed buttons
MEM_CONTROL_6_HELD=$FFFF00AC	; store value of extra held buttons
MEM_CONTROL_6_PRESSED=$FFFF00AE	; store value of extra pressed buttons
;
;-------------------------------------------------------------------------------
; game state
;-------------------------------------------------------------------------------
; MEM_OBJECTIVE is first because it's used for save game title 
MEM_OBJECTIVE=$FFFF00B0	; which text to show on objectives
MEM_GAME_STATE=$FFFF00B2	; used to control the main loop flow
MEM_ACTION_ID=$FFFF00B6	; current action selected by player
MEM_ACTION_TARGET_OBJID=$FFFF00B8	; action target object id
MEM_ACTION_TARGET_NPCID=$FFFF00BA	; NPC id if action target is an NPC
MEM_ACTION_TARGET_NPC_DIRECTION=$FFFF00BC	; put NPC back in right direction
MEM_ACTION_TABLE_OFFSET=$FFFF00BE	; relative address of action table entry
MEM_ACTIVE_ITEM=$FFFF00C0	; item that is currently being used
MEM_NPC_LOCATIONS=$FFFF00C2	; table to track where NPCs are located
MEM_DAY=$FFFF0142	; what day is it in the story
MEM_PLAYER_SPRITE=$FFFF0144	; which sprite to use for the player
MEM_GLOBAL_EVENT_FLAGS=$FFFF0146	; track events across days
MEM_DAY_EVENT_FLAGS=$FFFF014A	; track events in the current day
MEM_MENU_SCREEN_PAGE=$FFFF014E	; last page viewed in menu screen
MEM_STORY_EVENT1_SCENE_ID=$FFFF0150	; scene where the next story event occurs
MEM_STORY_EVENT2_SCENE_ID=$FFFF0152	; scene where the next story event occurs
MEM_OPTIONAL_EVENT1_SCENE_ID=$FFFF0154	; scene where an optional event occurs
MEM_OPTIONAL_EVENT2_SCENE_ID=$FFFF0156	; scene where an optional event occurs
MEM_OPTIONAL_EVENT3_SCENE_ID=$FFFF0158	; scene where an optional event occurs
;
;-------------------------------------------------------------------------------
; player inventory
;-------------------------------------------------------------------------------
MEM_PLAYER_ITEM_COUNT=$FFFF015A	; how many items the player is holding
MEM_PLAYER_ITEMS=$FFFF015C	; four items
;
;-------------------------------------------------------------------------------
; sprite management
;-------------------------------------------------------------------------------
MEM_SPRITE_Y_ORDER_CHANGED=$FFFF0164	; track if sprite order has changed
MEM_PLAYER_SPRITE_ID=$FFFF0166	; sprite table id of player sprite
MEM_PLAYER_SPRITE_X=$FFFF0168	; virtual x position of the player
MEM_PLAYER_SPRITE_Y=$FFFF016A	; virtual y position of the player
MEM_PLAYER_SPRITE_PATTERN_INDEX=$FFFF016C	; index of pattern in VDP
MEM_PLAYER_SPRITE_DIRECTION=$FFFF016E	; which direction the player faces
MEM_PLAYER_SPRITE_FRAME=$FFFF0170	; animation frame of player sprite
MEM_PLAYER_SPRITE_STEP_COUNTER=$FFFF0172	; used to determine when to move
MEM_PLAYER_MOVEMENT_COUNTER=$FFFF0174	; used to determine how far to move
MEM_PLAYER_MOVE_FREQUENCY=$FFFF0176	; how often to move
MEM_PLAYER_MOVE_PATTERN=$FFFF0178	; movement pattern
MEM_PLAYER_MOVE_PATTERN_LENGTH=$FFFF017C	; length of movement pattern
MEM_PLAYER_MOVE_INDEX=$FFFF017E	; where the sprite is the movement pattern
MEM_NPC0_SPRITE_ID=$FFFF0180	; sprite table id of NPC0 sprite
MEM_NPC0_SPRITE_X=$FFFF0182	; virtual x position of NPC0 sprite
MEM_NPC0_SPRITE_Y=$FFFF0184	; virtual y position of NPC0 sprite
MEM_NPC0_SPRITE_PATTERN_INDEX=$FFFF0186	; index of pattern in VDP
MEM_NPC0_SPRITE_DIRECTION=$FFFF0188	; which direction NPC0 faces
MEM_NPC0_SPRITE_FRAME=$FFFF018A	; animation frame of NPC0 sprite
MEM_NPC0_SPRITE_STEP_COUNTER=$FFFF018C	; used to determine when to move
MEM_NPC0_MOVEMENT_COUNTER=$FFFF018E	; used to determine how far to move
MEM_NPC0_MOVE_FREQUENCY=$FFFF0190	; how often to move
MEM_NPC0_MOVE_PATTERN=$FFFF0192	; movement pattern
MEM_NPC0_MOVE_PATTERN_LENGTH=$FFFF0196	; length of movement pattern
MEM_NPC0_MOVE_INDEX=$FFFF0198	; where the sprite is the movement pattern
MEM_NPC1_SPRITE_ID=$FFFF019A	; sprite table id of NPC1 sprite
MEM_NPC1_SPRITE_X=$FFFF019C	; virtual x position of NPC1 sprite
MEM_NPC1_SPRITE_Y=$FFFF019E	; virtual y position of NPC1 sprite
MEM_NPC1_SPRITE_PATTERN_INDEX=$FFFF01A0	; index of pattern in VDP
MEM_NPC1_SPRITE_DIRECTION=$FFFF01A2	; which direction NPC1 faces
MEM_NPC1_SPRITE_FRAME=$FFFF01A4	; animation frame of NPC1 sprite
MEM_NPC1_SPRITE_STEP_COUNTER=$FFFF01A6	; used to determine when to move
MEM_NPC1_MOVEMENT_COUNTER=$FFFF01A8	; used to determine how far to move
MEM_NPC1_MOVE_FREQUENCY=$FFFF01AA	; how often to move
MEM_NPC1_MOVE_PATTERN=$FFFF01AC	; movement pattern
MEM_NPC1_MOVE_PATTERN_LENGTH=$FFFF01B0	; length of movement pattern
MEM_NPC1_MOVE_INDEX=$FFFF01B2	; where the sprite is the movement pattern
MEM_NPC2_SPRITE_ID=$FFFF01B4	; sprite table id of NPC2 sprite
MEM_NPC2_SPRITE_X=$FFFF01B6	; virtual x position of NPC2 sprite
MEM_NPC2_SPRITE_Y=$FFFF01B8	; virtual y position of NPC2 sprite
MEM_NPC2_SPRITE_PATTERN_INDEX=$FFFF01BA	; index of pattern in VDP
MEM_NPC2_SPRITE_DIRECTION=$FFFF01BC	; which direction NPC2 faces
MEM_NPC2_SPRITE_FRAME=$FFFF01BE	; animation frame of NPC2 sprite
MEM_NPC2_SPRITE_STEP_COUNTER=$FFFF01C0	; used to determine when to move
MEM_NPC2_MOVEMENT_COUNTER=$FFFF01C2	; used to determine how far to move
MEM_NPC2_MOVE_FREQUENCY=$FFFF01C4	; how often to move
MEM_NPC2_MOVE_PATTERN=$FFFF01C6	; movement pattern
MEM_NPC2_MOVE_PATTERN_LENGTH=$FFFF01CA	; length of movement pattern
MEM_NPC2_MOVE_INDEX=$FFFF01CC	; where the sprite is the movement pattern
MEM_NPC3_SPRITE_ID=$FFFF01CE	; sprite table id of NPC3 sprite
MEM_NPC3_SPRITE_X=$FFFF01D0	; virtual x position of NPC3 sprite
MEM_NPC3_SPRITE_Y=$FFFF01D2	; virtual y position of NPC3 sprite
MEM_NPC3_SPRITE_PATTERN_INDEX=$FFFF01D4	; index of pattern in VDP
MEM_NPC3_SPRITE_DIRECTION=$FFFF01D6	; which direction NPC3 faces
MEM_NPC3_SPRITE_FRAME=$FFFF01D8	; animation frame of NPC3 sprite
MEM_NPC3_SPRITE_STEP_COUNTER=$FFFF01DA	; used to determine when to move
MEM_NPC3_MOVEMENT_COUNTER=$FFFF01DC	; used to determine how far to move
MEM_NPC3_MOVE_FREQUENCY=$FFFF01DE	; how often to move
MEM_NPC3_MOVE_PATTERN=$FFFF01E0	; movement pattern
MEM_NPC3_MOVE_PATTERN_LENGTH=$FFFF01E4	; length of movement pattern
MEM_NPC3_MOVE_INDEX=$FFFF01E6	; where the sprite is the movement pattern
;
;-------------------------------------------------------------------------------
; active scene
;-------------------------------------------------------------------------------
MEM_ACTIVE_SCENE_ID=$FFFF01E8	; ID of the active scene
MEM_ACTIVE_SCENE_EXIT_S=$FFFF01EA	; south exit of active scene
MEM_ACTIVE_SCENE_EXIT_N=$FFFF01EC	; north exit of active scene
MEM_ACTIVE_SCENE_EXIT_W=$FFFF01EE	; west exit of active scene
MEM_ACTIVE_SCENE_EXIT_E=$FFFF01F0	; east exit of active scene
MEM_ACTIVE_NPC_COUNT=$FFFF01F2	; number of NPCs in the current scene
MEM_OBJECT_LIST_OBJS=$FFFF01F4	; list of objects in current map
MEM_OBJECT_LIST_NPCS=$FFFF0230	; list of npcs in current map
MEM_SCENE_BGM=$FFFF0248	; reference to current background music
MEM_SCENE_PALETTE=$FFFF024C	; storing for fade in/out
;
;-------------------------------------------------------------------------------
; dialog & menu management
;-------------------------------------------------------------------------------
MEM_MENU_SELECTION=$FFFF02CC	; which menu item is selected - used for sprite 0
MEM_MENU_RESPONSE=$FFFF02CE	; which dialog choice was selected
MEM_DIALOG_FLAGS=$FFFF02D0	; used to manage dialogs
MEM_DIALOG_TITLE=$FFFF02D4	; pointer to location of dialog title
MEM_DIALOG_TEXT=$FFFF02D8	; pointer to location of dialog text
MEM_DIALOG_VDP=$FFFF02DC	; pointer to VPD location to write text
MEM_DIALOG_ITEM_LIST=$FFFF02E0	; pointer to location of item list to display
MEM_DIALOG_ITEM_INDEX=$FFFF02E4	; track which item in the list is being drawn
;
;-------------------------------------------------------------------------------
; scripted event management
;-------------------------------------------------------------------------------
MEM_SCRIPTED_EVENT_ADDR=$FFFF02E6	; pointer to scripted event running
MEM_SCRIPTED_EVENT_ACTION=$FFFF02EA	; current scripted event action
MEM_SCRIPTED_EVENT_STEPS=$FFFF02EC	; steps remaining in current action
MEM_SCRIPTED_SPRITE_ADDR=$FFFF02EE	; which sprite to move
;
;-------------------------------------------------------------------------------
; temp working space
;-------------------------------------------------------------------------------
MEM_TEMP_SPACE=$FFFF02F2	; temp working space
;
;-------------------------------------------------------------------------------
; collision detection
;-------------------------------------------------------------------------------
MEM_ACTIVE_SPRITE_LEFT_COLUMN=$FFFF0332	; left column of active sprite
MEM_ACTIVE_SPRITE_HIGH_LEFT=$FFFF0334	; high left row of active sprite
MEM_ACTIVE_SPRITE_LOW_LEFT=$FFFF0336	; low left row of active sprite
MEM_ACTIVE_SPRITE_RIGHT_COLUMN=$FFFF0338	; right column of active sprite
MEM_ACTIVE_SPRITE_HIGH_RIGHT=$FFFF033A	; high right row of active sprite
MEM_ACTIVE_SPRITE_LOW_RIGHT=$FFFF033C	; low right row of active sprite
MEM_COLLISION_MAP_ROW=$FFFF033E	; row of map data
MEM_COLLISION_RESULT=$FFFF0342	; result of collision test
MEM_COLLISION_DATA=$FFFF0344	; collision data for the current map
MEM_END=$FFFF05C4
